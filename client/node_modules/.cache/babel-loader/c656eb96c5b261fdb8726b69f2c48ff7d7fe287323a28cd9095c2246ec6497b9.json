{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\computer place\\\\Desktop\\\\exam\\\\e-commerce website\\\\ecommerce-app\\\\client\\\\src\\\\context\\\\UserStatsContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserStatsContext = /*#__PURE__*/createContext();\nexport const UserStatsProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    token\n  } = useContext(AuthContext);\n  const [userStats, setUserStats] = useState({\n    totalSpent: 0,\n    totalOrders: 0,\n    loyaltyPoints: 0,\n    tier: 'Bronze',\n    co2Saved: 0,\n    treesPlanted: 0,\n    ecoProductsPurchased: 0\n  });\n  const [orders, setOrders] = useState([]);\n  const [rewards, setRewards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (user && token) {\n      fetchUserStats();\n      fetchOrders();\n      fetchRewards();\n    }\n  }, [user, token]);\n  const fetchUserStats = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:5000/api/user/stats', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUserStats(response.data);\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      // Set default stats if API fails\n      setUserStats({\n        totalSpent: 15750,\n        totalOrders: 8,\n        loyaltyPoints: 1575,\n        tier: 'Silver',\n        co2Saved: 45.2,\n        treesPlanted: 3,\n        ecoProductsPurchased: 12\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchOrders = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/orders', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setOrders(response.data);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      // Set sample orders if API fails\n      setOrders([{\n        _id: '1',\n        orderNumber: 'ECO-2024-001',\n        date: new Date('2024-01-15'),\n        status: 'delivered',\n        total: 2499,\n        items: [{\n          name: 'Copper Water Bottle',\n          quantity: 1,\n          price: 1299\n        }, {\n          name: 'Bamboo Toothbrush Set',\n          quantity: 2,\n          price: 600\n        }],\n        trackingNumber: 'TRK123456789'\n      }, {\n        _id: '2',\n        orderNumber: 'ECO-2024-002',\n        date: new Date('2024-01-20'),\n        status: 'shipped',\n        total: 3999,\n        items: [{\n          name: 'Organic Cotton T-Shirt',\n          quantity: 2,\n          price: 1999\n        }, {\n          name: 'Jute Shopping Bag',\n          quantity: 1,\n          price: 499\n        }],\n        trackingNumber: 'TRK987654321'\n      }]);\n    }\n  };\n  const fetchRewards = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/rewards', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setRewards(response.data);\n    } catch (error) {\n      console.error('Error fetching rewards:', error);\n      // Set sample rewards if API fails\n      setRewards([{\n        id: 1,\n        title: '10% Off Next Purchase',\n        description: 'Get 10% discount on your next order',\n        pointsCost: 500,\n        type: 'discount',\n        value: 10\n      }, {\n        id: 2,\n        title: 'Free Shipping',\n        description: 'Free shipping on any order',\n        pointsCost: 300,\n        type: 'shipping',\n        value: 0\n      }, {\n        id: 3,\n        title: 'Eco Box Surprise',\n        description: 'Mystery box with eco-friendly products',\n        pointsCost: 1000,\n        type: 'product',\n        value: 'eco-box'\n      }, {\n        id: 4,\n        title: 'Plant a Tree',\n        description: 'Plant a tree in your name',\n        pointsCost: 200,\n        type: 'environmental',\n        value: 'tree'\n      }]);\n    }\n  };\n  const redeemReward = async rewardId => {\n    try {\n      const reward = rewards.find(r => r.id === rewardId);\n      if (!reward) {\n        return {\n          success: false,\n          error: 'Reward not found'\n        };\n      }\n      if (userStats.loyaltyPoints < reward.pointsCost) {\n        return {\n          success: false,\n          error: 'Insufficient points'\n        };\n      }\n\n      // Simulate API call\n      const response = await axios.post(`http://localhost:5000/api/user/redeem/${rewardId}`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Update local stats\n      setUserStats(prev => ({\n        ...prev,\n        loyaltyPoints: prev.loyaltyPoints - reward.pointsCost\n      }));\n      return {\n        success: true,\n        message: `Successfully redeemed ${reward.title}!`\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Simulate successful redemption for demo\n      const reward = rewards.find(r => r.id === rewardId);\n      if (reward && userStats.loyaltyPoints >= reward.pointsCost) {\n        setUserStats(prev => ({\n          ...prev,\n          loyaltyPoints: prev.loyaltyPoints - reward.pointsCost\n        }));\n        return {\n          success: true,\n          message: `Successfully redeemed ${reward.title}!`\n        };\n      }\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Redemption failed'\n      };\n    }\n  };\n  const updateStats = newStats => {\n    setUserStats(prev => ({\n      ...prev,\n      ...newStats\n    }));\n  };\n  const addOrder = order => {\n    setOrders(prev => [order, ...prev]);\n    // Update stats when new order is added\n    setUserStats(prev => ({\n      ...prev,\n      totalSpent: prev.totalSpent + order.total,\n      totalOrders: prev.totalOrders + 1,\n      loyaltyPoints: prev.loyaltyPoints + Math.floor(order.total * 0.1) // 10% of order value as points\n    }));\n  };\n  const value = {\n    userStats,\n    orders,\n    rewards,\n    loading,\n    redeemReward,\n    updateStats,\n    addOrder,\n    fetchUserStats,\n    fetchOrders,\n    fetchRewards\n  };\n  return /*#__PURE__*/_jsxDEV(UserStatsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(UserStatsProvider, \"nlhuMbzvFOfCs0Paz8LmGRpwsDU=\");\n_c = UserStatsProvider;\nvar _c;\n$RefreshReg$(_c, \"UserStatsProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","axios","jsxDEV","_jsxDEV","UserStatsContext","UserStatsProvider","children","_s","user","token","userStats","setUserStats","totalSpent","totalOrders","loyaltyPoints","tier","co2Saved","treesPlanted","ecoProductsPurchased","orders","setOrders","rewards","setRewards","loading","setLoading","fetchUserStats","fetchOrders","fetchRewards","response","get","headers","Authorization","data","error","console","_id","orderNumber","date","Date","status","total","items","name","quantity","price","trackingNumber","id","title","description","pointsCost","type","value","redeemReward","rewardId","reward","find","r","success","post","prev","message","_error$response","_error$response$data","updateStats","newStats","addOrder","order","Math","floor","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/computer place/Desktop/exam/e-commerce website/ecommerce-app/client/src/context/UserStatsContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport axios from 'axios';\n\nexport const UserStatsContext = createContext();\n\nexport const UserStatsProvider = ({ children }) => {\n  const { user, token } = useContext(AuthContext);\n  const [userStats, setUserStats] = useState({\n    totalSpent: 0,\n    totalOrders: 0,\n    loyaltyPoints: 0,\n    tier: 'Bronze',\n    co2Saved: 0,\n    treesPlanted: 0,\n    ecoProductsPurchased: 0\n  });\n  const [orders, setOrders] = useState([]);\n  const [rewards, setRewards] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (user && token) {\n      fetchUserStats();\n      fetchOrders();\n      fetchRewards();\n    }\n  }, [user, token]);\n\n  const fetchUserStats = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:5000/api/user/stats', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setUserStats(response.data);\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n      // Set default stats if API fails\n      setUserStats({\n        totalSpent: 15750,\n        totalOrders: 8,\n        loyaltyPoints: 1575,\n        tier: 'Silver',\n        co2Saved: 45.2,\n        treesPlanted: 3,\n        ecoProductsPurchased: 12\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchOrders = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/orders', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setOrders(response.data);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      // Set sample orders if API fails\n      setOrders([\n        {\n          _id: '1',\n          orderNumber: 'ECO-2024-001',\n          date: new Date('2024-01-15'),\n          status: 'delivered',\n          total: 2499,\n          items: [\n            { name: 'Copper Water Bottle', quantity: 1, price: 1299 },\n            { name: 'Bamboo Toothbrush Set', quantity: 2, price: 600 }\n          ],\n          trackingNumber: 'TRK123456789'\n        },\n        {\n          _id: '2',\n          orderNumber: 'ECO-2024-002',\n          date: new Date('2024-01-20'),\n          status: 'shipped',\n          total: 3999,\n          items: [\n            { name: 'Organic Cotton T-Shirt', quantity: 2, price: 1999 },\n            { name: 'Jute Shopping Bag', quantity: 1, price: 499 }\n          ],\n          trackingNumber: 'TRK987654321'\n        }\n      ]);\n    }\n  };\n\n  const fetchRewards = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/user/rewards', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setRewards(response.data);\n    } catch (error) {\n      console.error('Error fetching rewards:', error);\n      // Set sample rewards if API fails\n      setRewards([\n        {\n          id: 1,\n          title: '10% Off Next Purchase',\n          description: 'Get 10% discount on your next order',\n          pointsCost: 500,\n          type: 'discount',\n          value: 10\n        },\n        {\n          id: 2,\n          title: 'Free Shipping',\n          description: 'Free shipping on any order',\n          pointsCost: 300,\n          type: 'shipping',\n          value: 0\n        },\n        {\n          id: 3,\n          title: 'Eco Box Surprise',\n          description: 'Mystery box with eco-friendly products',\n          pointsCost: 1000,\n          type: 'product',\n          value: 'eco-box'\n        },\n        {\n          id: 4,\n          title: 'Plant a Tree',\n          description: 'Plant a tree in your name',\n          pointsCost: 200,\n          type: 'environmental',\n          value: 'tree'\n        }\n      ]);\n    }\n  };\n\n  const redeemReward = async (rewardId) => {\n    try {\n      const reward = rewards.find(r => r.id === rewardId);\n      if (!reward) {\n        return { success: false, error: 'Reward not found' };\n      }\n\n      if (userStats.loyaltyPoints < reward.pointsCost) {\n        return { success: false, error: 'Insufficient points' };\n      }\n\n      // Simulate API call\n      const response = await axios.post(`http://localhost:5000/api/user/redeem/${rewardId}`, {}, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      // Update local stats\n      setUserStats(prev => ({\n        ...prev,\n        loyaltyPoints: prev.loyaltyPoints - reward.pointsCost\n      }));\n\n      return { success: true, message: `Successfully redeemed ${reward.title}!` };\n    } catch (error) {\n      // Simulate successful redemption for demo\n      const reward = rewards.find(r => r.id === rewardId);\n      if (reward && userStats.loyaltyPoints >= reward.pointsCost) {\n        setUserStats(prev => ({\n          ...prev,\n          loyaltyPoints: prev.loyaltyPoints - reward.pointsCost\n        }));\n        return { success: true, message: `Successfully redeemed ${reward.title}!` };\n      }\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || 'Redemption failed' \n      };\n    }\n  };\n\n  const updateStats = (newStats) => {\n    setUserStats(prev => ({ ...prev, ...newStats }));\n  };\n\n  const addOrder = (order) => {\n    setOrders(prev => [order, ...prev]);\n    // Update stats when new order is added\n    setUserStats(prev => ({\n      ...prev,\n      totalSpent: prev.totalSpent + order.total,\n      totalOrders: prev.totalOrders + 1,\n      loyaltyPoints: prev.loyaltyPoints + Math.floor(order.total * 0.1) // 10% of order value as points\n    }));\n  };\n\n  const value = {\n    userStats,\n    orders,\n    rewards,\n    loading,\n    redeemReward,\n    updateStats,\n    addOrder,\n    fetchUserStats,\n    fetchOrders,\n    fetchRewards\n  };\n\n  return (\n    <UserStatsContext.Provider value={value}>\n      {children}\n    </UserStatsContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}